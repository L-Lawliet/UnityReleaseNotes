/unity/whats-new/2019.2.6
Release notes
Known Issues in 2019.2.6f1

Graphics - General: Editor is lagging when modifying material properties
(1094991)
Mobile: Player Settings window becomes blank and starts spitting errors after going to Android Settings > Icon
(1177292)
Package Manager: The Package Manager UI does not refresh when you install or remove packages.
(1148329, 1152868)
Physics2D: Crash on PhysicsContacts2D::RemoveContact when destroying a GameObject in the play mode
(1110897)
Physics: Crash on block_remove when changing mesh to Plane in Skinned Mesh Renderer while cloth component attached
(1162918)
Scene Management: 2019.3 and 2019.1 Unity versions are significantly slower when entering the play mode
(1161373)
Scene Management: Enabled Prefab is disabled after upgrading to Improved Prefabs
(1138224)
Scene Management: Transform::GetWorldToLocalMatrix  crash during first import when accessing Components in Prefabs
(1159905)
Scripting: Crash on SortByExecutionOrder after setting up font kerning values when PlayerPrefs.DeleteAll() is called in Start()
(1179631)
Scripting: Custom built DLL's scripts which have classes derived from UIBehaviour cannot be added as a component anymore
(1160664)
Scripting: Handles.Disc function performance is very slow in Scene View
(1165684)
Scripting: [Android][Mono][IL2CPP] "Unable to find libc" error thrown when executing certain SslStream constructor 
(1022228)
Scripting: [Templates] Clamp BlendShapes are set to true by default when creating new projects
(1148638)
XR: Cardboard projects default to 30 frames per second unless targetFrameRate is set to 60.
(1143799, 1144492)
iOS:  Apple throws Deprecated API Usage warning for using UIWebView when submitting Builds to the App Store Connect
(1180664)

2019.2.6f1 Release Notes
System Requirements Changes
Nothing changed.
Improvements

Scripting: Add ENABLE_INPUT_SYSTEM and ENABLE_LEGACY_INPUT_MANAGER defines so code can be written to work in both input systems
Scripting: Make linkLabel style public

Fixes

Android: Fixed crash when using il2cpp and the app was previously backed up.
(1170543, 1173796)
Asset Import: Fixed and issue where curves previews in the ModelImporter's Animation panel are were not correctly updated when Revert is clicked.
(1166122, 1173707)
Asset Import: Fixed and issue where the TextureImporter's apply button is properly enabled/disabled after changes are made in the Per-Platforms sections.
(1167983, 1173706)
Asset Import: ImportSettings can be changed and applied from an Inspector while in Playmode.
(1169942, 1173708)
Asset Management: Fixed and issue for New ScriptableObject variable references that are not reloaded when changing branch in VCS until Editor is restarted
(1153117, 1174417)
DirectX: Fixed an issue for corrupt DXT NPOT images in DX12.
(1154903, 1155973)
Editor: Bring back inspector autoscroll, do not reset scroll position when entering playmode.
(1169695, 1178253)
Editor: Copy default shortcut profiles in mode preference folder.
(1173228, 1180309)
Editor: Fixed a crash when opening a file with internal editor.
(1173314, 1176160)
IL2CPP: Fixed an issue with IL2CPP not returning null when calling Activator.CreateInstance() with a nullable type, which is the expected behavior when compared to Mono and .NET.
(1172280, 1173451)
IL2CPP: Fixed an issue with IL2CPP where casting a negative float to an unsigned integer type would produce different results between x86 and ARM platforms.
(1166109, 1173700)
IL2CPP: Fixed an unimplemented internal call that caused IL2CPP to fail when calling Marshal.StringToCoTaskMemAnsi().
(1172775, 1173190)
IL2CPP: Generate proper code when array of type long or ulong is used as the type of a field in a marshalable type.
(1173310, 1173956)
iOS: Fixed and issue with USYM_UPLOAD_AUTH_TOKEN thrown in Xcode when a project is built in BatchMode with -runTests and Cloud Diagnostics.
(1167025, 1178676)
Linux: Fixed and issue with Linux bugreporter where it was collecting Editor.log from the wrong location for 2019.2.0a7+.
(1176211, 1181812)
Particles: Apply size over lifetime before detecting collisions on the first frame after a particle is spawned.
(1172390, 1175482)
Particles: Fixed a crash in WorldCollision function when spawning particles.
(1168859, 1175299)
Particles: Fixed a crash when using Graphics.ExecuteCommandBuffer with a disabled ParticleSystemRenderer component.
(1176567, 1178872)
Particles: Fixed a dynamic batching corruption.
(1173610, 1175552)
Particles: Fixed a NULL reference exceptions when using the Line/Trail Renderer Inspectors
(1169972, 1175316)
Particles: Fixed a regression in the internal mathl ibrary causing some particle rotations to be represented incorrectly.
(1163414, 1178391)
Particles: Fixed a regression when trying to use Material Property Blocks with the Particle Systems.
(1174499, 1175555)
Particles: Fixed a Start Delay if system is paused and resumed before the Start Delay has expired.
(1178403, 1179672)
Particles: Fixed an assert message spam when using orthographic cameras and a Particle System with 0 scale along the Z axis.
(1178477, 1180566)
Particles: Fixed an issue to correctly apply clamping and wrapping to ParticleSystem.time script API, to ensure it is always valid.
(1179965, 1182141)
Particles: Fixed an issue to ensure ParticleSystem.SetParticles applies new particle sizes immediately.
(1179889, 1179891)
Particles: Fixed and issue with continuous repainting of the Particle System Inspector, to improve battery life of portable devices in the Editor.
(1087598, 1174724)
Particles: Fixed animation bindings for the Orbital Velocity properties.
(1173552, 1175488)
Particles: Support rendering lines/trails using orthographic cameras with negative near plane values.
(1169997, 1182135)
Physics: Fixed an incorrectly transformed cloth gravity, so that set cloth accelerations correctly.
(1173813, 1176992)
Scripting: Makes the incremental gc player setting force an editor restart when changed, as changing it without a restart could result in crashes.
(1178756, 1181519)
Universal Windows Platform: Fixed an issue with Build & Run when using Visual Studio 2019.
(1158603, 1178950)
Universal Windows Platform: Fixed an issue with building with Executable Only builds for ARM 32-bit architecture.
(1162618, 1178973)
Universal Windows Platform: Fixed an with the error message when deploying wrong CPU architecture build via device portal.
(1178960, 1179442)
Universal Windows Platform: Visual Studio generated when targeting Visual Studio 2019 will now correctly use v142 C++ toolset.
(1166131, 1178919)
Video: Fixed VideoPlayer.aspectRatio when using Camera Viewport Rect.
(1164157, 1177653)
Windows: Fixed a issue where Screen.fullscreenMode returning garbage value on Windows Editor.
(1178561, 1178907)
Windows: Fixed a rare crash ("Screen: DX11 could not switch resolution") when starting player on certain hardware and operating system configurations.
(1178706, 1178912)
XR: Fixed and issue for PostProcessing effects that are not applied to built applications on Android (Oculus GO/Quest).
(1103954, 1182171)

System Requirements
For development
OS: Windows 7 SP1+, 8, 10, 64-bit versions only; macOS 10.12+. (Server versions of Windows & OS X are not tested.)
CPU: SSE2 instruction set support.
GPU: Graphics card with DX10 (shader model 4.0) capabilities.
The rest mostly depends on the complexity of your projects.
Additional platform development requirements:

iOS: Mac computer running minimum macOS 10.12.6 and Xcode 9.4 or higher.
Android: Android SDK and Java Development Kit (JDK); IL2CPP scripting backend requires Android NDK.
Universal Windows Platform: Windows 10 (64-bit), Visual Studio 2015 with C++ Tools component or later and Windows 10 SDK

For running Unity games
Generally content developed with Unity can run pretty much everywhere. How well it runs is dependent on the complexity of your project. More detailed requirements:

Desktop:

OS: Windows 7 SP1+, macOS 10.12+, Ubuntu 12.04+, SteamOS+
Graphics card with DX10 (shader model 4.0) capabilities.
CPU: SSE2 instruction set support.

iOS player requires iOS 9.0 or higher.
Android: OS 4.1 or later; ARMv7 CPU with NEON support or Atom CPU; OpenGL ES 2.0 or later.
WebGL: Any recent desktop version of Firefox, Chrome, Edge or Safari.
Universal Windows Platform: Windows 10 and a graphics card with DX10 (shader model 4.0) capabilities


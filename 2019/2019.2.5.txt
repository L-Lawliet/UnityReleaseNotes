/unity/whats-new/2019.2.5
Release notes
Known Issues in 2019.2.5f1

Cloud Diagnostics: USYM_UPLOAD_AUTH_TOKEN is thrown in Xcode when the Project is built in BatchMode with -runTests and Cloud Diagnostics enabled
(1167025)
Graphics - General: Editor is lagging when modifying material properties
(1094991)
IL2CPP:  Build fails when compiling a struct with a long array inside it
(1173310)
Mobile: Player Settings window becomes blank and starts spitting errors after going to Android Settings > Icon
(1177292)
Package Manager: The Package Manager UI does not refresh when you install or remove packages.
(1148329, 1152868)
Physics: Crash on block_remove when changing mesh to Plane in Skinned Mesh Renderer while cloth component attached
(1162918)
Physics: Plane with Cloth component is affected by high external force when in Play mode
(1173813)
Scene Management: 2019.3 and 2019.1 Unity versions are significantly slower when entering the play mode
(1161373)
Scene Management: Enabled Prefab is disabled after upgrading to Improved Prefabs
(1138224)
Scene Management: Transform::GetWorldToLocalMatrix  crash during first import when accessing Components in Prefabs
(1159905)
Scripting: Handles.Disc function performance is very slow in Scene View
(1165684)
Scripting: [Android][Mono][IL2CPP] "Unable to find libc" error thrown when executing certain SslStream constructor 
(1022228)
Scripting: [Templates] Clamp BlendShapes are set to true by default when creating new projects
(1148638)
Shuriken: WorldCollision crashes when spawning particles with World Collision enabled
(1168859)
VR: [Oculus GO] PostProcessing effects are not applied to built applications
(1103954)
XR: Cardboard projects default to 30 frames per second unless targetFrameRate is set to 60.
(1143799, 1144492)
iOS:  Apple throws Deprecated API Usage warning for using UIWebView when submitting Builds to the App Store Connect
(1180664)

2019.2.5f1 Release Notes
System Requirements Changes
Nothing changed.
Backwards Compatibility Breaking Changes

Android: Improve error messages for cases where android application fails to load libmain.so. Previously it was printing "Unable to find main", now it will print "Failed to load 'libmain.so', the application will terminate.", additionally it will print exception from System.loadLibrary with detailed info, where the application was looking for libmain.so

Improvements

Editor: Adding PlatformSpecificOpenFileAtLine API

Fixes

2D: Fixed an issue where TextureImporter's meta file might get changed when reimporting with no settings changed in the importer.
(1092018, 1179241)
Android: Fixed an issue where mesh positions were being set to 0 when using SRP batcher on OpenGL ES.
(1166303, 1175181)
Android: Fixed an issue where the right mouse button release was not being recognised.
(1168711, 1171438)
Android: Fixed an issuee with AtlasPacker not respecting ETC2 fallback build settings on Android.
(1170597, 1171487)
Asset Import: Fixed an issue where materials generated by the model importer don't have diffuse textures assigned and have a smoothness value of 0.5.
(1172621, 1178070)
Asset Import: Fixed an issue where read-only "FBX" file would be corrupted after changing one of its materials and undoing.
(1120097, 1173379)
Asset Import: Fixed issue where materials generated by the model importer don't have diffuse textures assigned and have a smoothness value of 0.5.
(1172621, 1178070)
Compute: Fixed an issue with compute shaders not being imported when no graphics API in the current build target has compute support.
(1087245, 1171643)
Facebook: Fixed an issue where the Editor throws errors related to SDK after Facebook support installation.
(1142442, 1182081)
Graphics: Fixed performance regression when using legacy graphics jobs
(1162175, 1167121)
Graphics: Stopped Unity from spamming the GLSL shader error message ("Shader cannot be patched for instancing.") when you select a Terrain object in the Editor and the active Graphics API is OpenGLES3.
(1176124, 1179433)
iOS: Fix multithreaded rendering by adding an additional validity check for backbuffer texture on ios/tvos.
(1171225, 1175501)
Scripting: Fixed an issue to avoid force synchronization when external package is selected.
Scripting: Fixed precedence for prerelease label in SemVersion parser.
(1170107, 1177984)
Shaders: Fixed an error in OpenGL ES shader translation that can cause 'undeclared variable' shader compile error.
(1160309, 1173942)
UI: Remove "m_TypeName" from UnityEventBase class as this information can be recovered from the reflection system post-serialisation.
(833543, 1172090)
Version Control: Fixed a DLL breaking VC API change by splitting the Provider.Checkout method with an optional third argument into two overloads - with two and three arguments respectively.
(1172818, 1179258)
Version Control: Fixed an issue with various objects (mostly Project, Quality, Physics settings) marking themselves as modified and thus getting checked out in Perfoce, when some code assigns property values that are identical to previous values.
(1168290, 1179506)
Version Control: Fixed Provider.Checkout API change in 2019.x breaking precompiled DLLs that call it
(1172818, 1179258)
Video: Fixed a WindowsVideoMedia error 0x8007007b that is thrown when importing an AssetBundle with video in it
(1168061, 1171396)

System Requirements
For development
OS: Windows 7 SP1+, 8, 10, 64-bit versions only; macOS 10.12+. (Server versions of Windows & OS X are not tested.)
CPU: SSE2 instruction set support.
GPU: Graphics card with DX10 (shader model 4.0) capabilities.
The rest mostly depends on the complexity of your projects.
Additional platform development requirements:

iOS: Mac computer running minimum macOS 10.12.6 and Xcode 9.4 or higher.
Android: Android SDK and Java Development Kit (JDK); IL2CPP scripting backend requires Android NDK.
Universal Windows Platform: Windows 10 (64-bit), Visual Studio 2015 with C++ Tools component or later and Windows 10 SDK

For running Unity games
Generally content developed with Unity can run pretty much everywhere. How well it runs is dependent on the complexity of your project. More detailed requirements:

Desktop:

OS: Windows 7 SP1+, macOS 10.12+, Ubuntu 12.04+, SteamOS+
Graphics card with DX10 (shader model 4.0) capabilities.
CPU: SSE2 instruction set support.

iOS player requires iOS 9.0 or higher.
Android: OS 4.1 or later; ARMv7 CPU with NEON support or Atom CPU; OpenGL ES 2.0 or later.
WebGL: Any recent desktop version of Firefox, Chrome, Edge or Safari.
Universal Windows Platform: Windows 10 and a graphics card with DX10 (shader model 4.0) capabilities


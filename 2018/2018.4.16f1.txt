/unity/whats-new/2018.4.16f1
Release notes
Known Issues in 2018.4.16f1

Animation: Animator.Update CPU time spikes when multiple animations are playing
(1184690)
Asset Bundles: Building asset bundles when build path doesn't exist causes a failed assertion on "pluginAppendices.size() <= 1"
(1203242)
Package Manager: Immutable packages altered by the API Updater are reverted to their original state when packages are resolved, which can lead to slower import performance in that context.
Profiling: Profiler stucks with Autoconnected Player option and can't be switched back to Editor when AndroidPlayer is selected
(1193777)
Shuriken: Semaphore.WaitForSignal under Canvas.BuildBatch causes a slow editor in Play mode
(1178300)

2018.4.16f1 Release Notes
Fixes

2D: Fixed an issue where Sprite Atlases are modified after building.
(1203619)
Android: Added support gfx device command line arguments in release builds.
(1195061)
Android: Fixed an issue with particle rendering when using the Light Weight Render Pipeline with Vulkan on Android.
(1126887)
Android: Fixed an issue with poor physics performance on ARM64 on certain devices with power mode disabled.
(1186295)
Android: Fixed black screen when project is configured for linear rendering with 16 backbuffer.
(1152322)
Android: Fixed Vulkan feature usage declaration in Android manifest.
(1198652)
Apple TV: Fixed an issue whereTouchScreenKeyboard.visible does not get set to false when the keyboard is dismissed on tvOS.
(1171490)
Asset Import: Changed import errors for .sbsar files to warnings, changed warning for psd matte to info.
(1184085)
Asset Pipeline: Fixed an assert thrown during RecompressAssetBundleAsync.
(1193306, 1195067)
Editor: Fixed an assembly lockup issue in the Windows Editor when certain dialogs or progress bars were active.
(1191378)
Editor: Increased the length limit on the menu names from 127 to 255.
(1196971)
Graphics: Fixed a sporadic crash when using GraphicsJobs with Vulkan.
(1194077)
Graphics: Fixed an issue where race condition in Vulkan GpuProgram loading when using GraphicsJobs.
Graphics: Fixed Texture Streaming with Native jobs on PS4.
Graphics: Reset current RT to override currently stored store actions.
(1188663)
IL2CPP: Fixed secure string allocation on Windows platforms.
(1183660)
IL2CPP: Fixed the behavior of network interface detection code on iOS.
(1191670)
IL2CPP: Improved the performance of job methods on Microsoft platforms.
(1196765)
IL2CPP: Prevented a possible crash on shutdown when script debugging is enabled on macOS.
(1186518)
iOS: Added support for iPad 7 generation.
(1196002)
iOS: Fixed an issue where GUI.RepeatButton returns true only when the button is released.
(1187026)
iOS: Fixed an issue where the crash reporter would crash if Unity failed to initialize correctly.
(1145982)
macOS: Fixed Mac Standalone build not containing .meta files inside native plugin bundles.
(1178777)
Package Manager: Fixed an issue that prevented the Package Manager from writing the project manifest file if the project was stored on an SMB network share.
(1172278)
Package Manager: Fixed an issue where a misconfigured registry could write files to arbitrary locations outside the package cache.
Package Manager: Fixed an issue where adding a package would fail if a conflict was found in one of its dependencies.
Package Manager: Fixed an issue where adding a package would succeed even if one of its direct or indirect dependencies was missing, resulting in a broken project.
Package Manager: Fixed an issue where the Asset Database did not always reimport a packaged asset that was modified by updating a package.
Package Manager: Fixed timeout and network robustness issues.
Package Manager: Fixed undefined behavior resulting from concurrent operations.
Package Manager: Fixed various issues around Git-based packages, including URL handling and Git-LFS handling.
Package Manager: Fixed various issues that could lead to corrupted packages in projects (e.g. interrupting the package installation process could leave the project cache in a broken state).
Particles: Fixed a crash when using scripted simulation on nested hierarchies due to threading race condition.
(1194538)
Particles: Fixed a particle crash due to uninitialized currentSize array.
(1197761)
Particles: Fixed a particle rendering when using cmd.DrawRendered and context.ExecuteCommandBuffer.
(1195214)
Particles: Improved behaviour of Enable Roll checkbox.
(1081596)
Prefabs: Fixed an issue where duplicated child nested prefab is not created in the same position.
(1157320)
Prefabs: Fixed an issue where removed components on nested prefabs could reappear when applying subsequent modifications.
(1185746)
Scripting: Fixed a crash due to random memory corruption.
(1204409)
Scripting: Fixed a crash that may occur when using stackalloc.
(1172987)
Scripting: Fixed an issue where ScreenCapture.CaptureScreenshot is not working properly with Physical cameras when superSize > 1.
(1192257)
Scripting: Fixed Class hierarchies with UnityEvent properties not being properly discovered by the editor inspector.
(1196591)
Timeline: Fixed an issue where Timeline Window lock state when restarting Unity and no timeline is selected.
(1201405)
UI: Fixed an issue where EventSystem not being created when an EventSystem prefab was loaded but not in the scene.
(1200002)
UI: Fixed an issue where Nested Canvases using the wrong display id when calculating the ProjectionMatrix.
(1199299)
UI: Fixed sorting when rendering Camera and World space canvases on multiple displays. Screen space UI would cause Z testing to be disabled for any displays that were rendered after that display.
(1199369)
Version Control: Fixed an issue where save project being very slow when there are a lot of changed assets and a slow Perforce connection.
(1170253)
Version Control: Fixed an issue where Version Control window open slows down various VCS operations.
(991427)
Video: Fixed an issue on Windows 7 where VideoPlayer.Prepare causing a stack overflow crash if Video is loaded from asset bundle.
(1190915)
Web: Disabled warning on non-local unity api connections if api key was not provided.
(1198465)
WebGL: Disabled unnecessary default canvas event for "on drag" WebGL.
(1190839)
WebGL: Fixed an issue where in WebGL builds Canvas Rect Mask 2D component was not working properly.
(1014187)
WebGL: Fixed file access issues when using DownloadHandlerFile on WebGL.
(1189549)
Windows: Fixed an issue where primary display leaving fullscreen when 2nd display activated.
(1207918)
XR: Fixed OnApplicationPause events when using HolographicPauseOnTrackingLoss.
(1192322)

Changes

Package Manager: Changed the package installation process to no longer set package directories and files as read-only on disk. This prevents all sorts of possible corruption scenarios (e.g. read-only directories, partially-read-only packages in the package cache) and avoids some permission issues when removing packages.
Package Manager: Changed the package installation process to systematically revert packages to their original state. Note: this has the side-effect of actively reverting local modifications in immutable packages, which could previously be kept until the dependency was updated to a different version of the package. In order to preserve local changes, a package should first be [embedded in the project](https://docs.unity3d.com/Manual/upm-embed.html).

Improvements

Package Manager: Added support for configuring additional SSL certificate authorities, including self-signed certificates. See the [Unity Manual](https://docs.unity3d.com/Manual/upm-network.html#SSL) for more information on how to use this.
Package Manager: Added support for Git URLs with the SCP format (e.g. git@github.com/user/repo).
Package Manager: Added support for Git URLs without a trailing .git by using git:// URLs or prepending git+ to URLs (e.g. git+https://github.com/user/repo).
Package Manager: Added support for tarball-based dependencies (e.g. "file:.tgz").
Package Manager: Changed the UnityEditor.PackageManager.Client.Add method to make the @ prefix optional when adding Git-based dependencies and local dependencies (file:).
Package Manager: Reduced the amount of data transferred over the network when fetching package metadata from the registry.

Features

Multiplayer: Added UNET encryption support.

